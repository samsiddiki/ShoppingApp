@page "/login"
@using DataModels.CustomModels;
@using Shop.Admin.Services;
@inject IAdminPanelService adminPanelService;
@inject ProtectedSessionStorage sessionStorage; //Keeps the user loggin in until he's on browser. Logouts automatically.
@inject NavigationManager navManager;

<style>
    .loginBox{
        font-family: 'Open Sans',sans-serif;
        margin: 0 auto 0 auto;
        width: 100%;
        text-align: center;
        margin: 20px 0 20px 0;
    }

    p{
        font-size: 12px;
        text-decoration: none;
        color: #ffffff;
    }
    h1{
        font-size:1.5rem;
        color: #525252;
    }
    .box{
        background: white;
        width:300px;
        border-radius: 6px;
        margin: 0 auto 0 auto;
        padding: 0 0 10px 0;
        border: #2877e9 4px solid;
    }
    .email{
        background: #ffffff;
        border: #ccc 1px solid;
        border-bottom: #ccc 2px solid;
        padding: 8px;
        width: 250px;
        color: #525252;
        margin-top: 10px;
        font-size: 1em;
        border-radius: 4px;
    }
    .password{
        border-radius:4px;
        background: #ecf0f1;
        border: #ccc 1px solid;
        padding: 8px;
        width: 250px;
        font-size: 1em;
    }
</style>

<div style="min-height: 400px">
    <div class="loginBox">
        <div class="box">
            <br/>
            <h1>Admin Panel</h1>
            @if (loginModel != null)
            {
                <EditForm Model="loginModel" OnValidSubmit="Login_Click">
                    <DataAnnotationsValidator/>

                    <InputText type="email" name="Email" class="email" placeholder="Email" @bind-Value="@loginModel.EmailId"/>
                    <ValidationMessage For="@(()=>loginModel.EmailId)" />

                    <InputText type="password" class="password" placeholder="Password" @bind-Value="@loginModel.Password"/>
                    <ValidationMessage For="@(()=>loginModel.Password)"/>
                        <br/><br/>
                    <input type="submit" class="btn-primary" value="Login"/>

                </EditForm>
            }
        </div>
        <div>
            <br/>
            <br />
            <p style="color: red;">
                <h4>@alertMessage</h4>
            </p>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }
    public LoginModel loginModel { get; set; }
    public string alertMessage { get; set; }
    protected override Task OnInitializedAsync()
    {
        loginModel = new LoginModel();
        return base.OnInitializedAsync();
    }
    private async Task Login_Click()
    {
        var response = await adminPanelService.AdminLogin(loginModel);
        if (response.Status == true)
        {
            var user_response = response.Message.Split("|");
            await sessionStorage.SetAsync("adminKey", user_response[0]);
            await sessionStorage.SetAsync("adminName", user_response[1]);
            await sessionStorage.SetAsync("adminEmail", user_response[2]);
            
            await notify.InvokeAsync();
            navManager.NavigateTo("/");
        }
        else
        {
            alertMessage = response.Message;
        }
    }
}
